name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: Default

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'Azure'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate486226172'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # ToDo: Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    #Run Terraform Apply
    #ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform apply 
      inputs:
        provider: 'azurerm'
        command: 'apply'        
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

   
#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script:          "npm install -g newman-reporter-junitfull"
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite        
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script:          "newman run regression.json -e environment.json -d data.json -r junit --reporter-junit-export postman.xml"
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'    
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder:       "$(System.DefaultWorkingDirectory)"
        mergeTestResults: true
        testRunTitle:       "Udacity Latest Test"

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload  Selenium Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile:  '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile:  '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-apitests.zip'
    # FakeRestAPI - Publish    
    - publish:  $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-apitests.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-apitests

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile:  '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-pertests.zip'
    # JMeter Test Suite - Publish    
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-pertests.zip'
      displayName: 'Upload Performance Test Suite'
      artifact: drop-pertests

# #--------------------------------------------#  
# # DEPLOYMENT STAGE
# #--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
 
  - deployment: FakeRestAPI
    pool: Default   
    environment: 'udacity'   
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription:      "Azure"
              appName:               "sinlq3-udacity-project3-AppService" 
              appType: webApp
              package: $(Pipeline.Workspace)/drop-apitests/$(Build.BuildId)-apitests.zip # ToDo: Use the published zip artifact. 
          #--------------------------------------------#    
          #Run JMeter test suite against the App Service        
          - task: PowerShell@2
            displayName: 'Execute JMeter'
            inputs:
              targetType: 'inline' 
              script: wget -O apache-jmeter-5.5.zip https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.zip ; Expand-Archive -Force -Path apache-jmeter-5.5.zip -DestinationPath ./jmeter ; Expand-Archive -Force -Path $(Build.BuildId)-pertests.zip -DestinationPath ./test-suite;.\jmeter\apache-jmeter-5.5\bin\jmeter -n -t .\test-suite\stress-test.jmx -l .\results.jtl;
                                                                        
              workingDirectory: $(Pipeline.Workspace)/drop-pertests            


          - task: PowerShell@2
            displayName: 'Execute Selenium'
            inputs:
              targetType: 'inline' 
              script: Expand-Archive -Force -Path $(Build.BuildId)-uitests.zip -DestinationPath ./uitests;py ./uitests/add-remove-from-cart.py > $(Build.BuildId)-uitests-log.txt;

              workingDirectory: $(Pipeline.Workspace)/drop-uitests            
          
 